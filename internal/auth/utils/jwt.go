package utils

import (
    "crypto/rand"
    "encoding/hex"
    "errors"
    "fmt"
    "os"
    "time"

    "book-store/internal/auth/config"

    "github.com/golang-jwt/jwt/v5"
)

type Claims struct {
    UserID string `json:"user_id"`
    jwt.RegisteredClaims
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT access-—Ç–æ–∫–µ–Ω–∞
func GenerateJWT(userID string) (string, error) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    expiresIn := time.Duration(config.AccessTokenMinutes) * time.Minute

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC-–≤—Ä–µ–º—è, –≤—ã—á–∏—Ç–∞–µ–º 1 —Å–µ–∫. ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç microdrift
    issuedAt := time.Now().UTC().Add(-1 * time.Second)
    expiresAt := issuedAt.Add(expiresIn)


    claims := Claims{
        UserID: userID,
        RegisteredClaims: jwt.RegisteredClaims{
            IssuedAt:  jwt.NewNumericDate(issuedAt),
            ExpiresAt: jwt.NewNumericDate(expiresAt),
        },
    }

    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

    secret := os.Getenv("JWT_SECRET")
    if secret == "" {
        return "", errors.New("JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    }

    return token.SignedString([]byte(secret))
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ userID –∏–∑ JWT
func ParseJWT(tokenStr string) (string, error) {
    secret := os.Getenv("JWT_SECRET")
    if secret == "" {
        fmt.Println("‚ùå JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω")
        return "", errors.New("JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    }

    fmt.Println("üîê JWT_SECRET (–∏–∑ env):", secret[:5], "...") // –æ–±—Ä–µ–∑–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    token, err := jwt.ParseWithClaims(tokenStr, &Claims{}, func(token *jwt.Token) (interface{}, error) {
        return []byte(secret), nil
    })
    if err != nil {
        fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:", err)
        return "", err
    }

    claims, ok := token.Claims.(*Claims)
    if !ok || !token.Valid {
        fmt.Println("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. Claims:", claims, "Valid:", token.Valid)
        return "", errors.New("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ claims")
    }

    fmt.Println("‚úÖ JWT –≤–∞–ª–∏–¥–µ–Ω. UserID:", claims.UserID)
    return claims.UserID, nil
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ—Å—Ç–æ–π–∫–æ–≥–æ refresh —Ç–æ–∫–µ–Ω–∞
func GenerateRefreshToken() (string, error) {
    bytes := make([]byte, 32)
    if _, err := rand.Read(bytes); err != nil {
        return "", err
    }
    return hex.EncodeToString(bytes), nil
}
