basePath: /
definitions:
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Это документация API для админ-панели на Go
  title: Go Auth API
  version: "1.0"
paths:
  /admin/dashboard:
    get:
      description: 'Показывает статистику: количество пользователей, активные сессии,
        последние входы'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Панель администратора
      tags:
      - admin
  /admin/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      summary: Получить всех пользователей
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Доступно только администратору
      parameters:
      - description: Новый пользователь
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь создан
          schema:
            type: string
        "400":
          description: Невалидные данные
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать пользователя
      tags:
      - admin
  /admin/users/{id}:
    delete:
      description: Удаляет пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Пользователь удалён
          schema:
            type: string
        "500":
          description: Ошибка удаления
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить пользователя
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Обновляет информацию пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Обновлённые данные
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь обновлён
          schema:
            type: string
        "400":
          description: Ошибка запроса
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить пользователя
      tags:
      - admin
  /login:
    post:
      consumes:
      - application/json
      description: Логин по email и паролю. Возвращает access_token.
      parameters:
      - description: Данные для логина
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный email или пароль
          schema:
            type: string
      summary: Авторизация пользователя
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Создание нового пользователя
      parameters:
      - description: Данные нового пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь создан
          schema:
            type: string
        "400":
          description: Невалидные данные
          schema:
            type: string
      summary: Регистрация пользователя
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
